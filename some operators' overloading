+ operator :
-----------
class line{
    public:
    double a, b;
        line(double a = 0, double b = 0){
            this->a = a;
            this->b = b;
        }
        line operator+(line l1){
            line l3;
            l3.a = this->a+l1.a;
            l3.b = this->b+l1.b;
            return l3;
        }
};

int main(){
    line l1(1, 3);
    line l2(1, 2);
    line l3;
    l3 = l1 + l2;
    cout << l3.a << " " << l3.b;
    return EXIT_SUCCESS;
}
----------------------------------------------------------------------------------------
== operator : 
-------------
class relation{
    int x, y, z;
    public:
    relation(int a, int b, int c){
        x = a;
        y = b;
        z = c;
    }
    bool operator==(relation r){
        return(this->x == r.x &&
               this->y == r.y &&
               this->z == r.z);
    }
};

int main() {
    relation r1(1,2,3);
    relation r2(1,2,3);
    cout << (r1 == r2);
    return 0;
}
------------------------------------------------------------------------------------------
friend operator :
-----------------
class arr{
    public:
    int x, y;
    
    arr(int x = 0, int y = 0){
        this->x = x; 
        this->y = y;
    }
    friend arr operator+(int n, arr a);
};
arr operator+(int n, arr a){
    arr r1;
    r1.x = a.x +n; r1.y = a.y +n;
    return r1;
}
int main(){ 
    arr r(1,2);
    arr rr = 10 + r;//operator+(10, r);
    cout << rr.x << " " << rr.y;
}
-------------------------------------------------------------------------------------------
input/output operator :
-----------------------
class arr{
    public:
    int x, y;
    
    arr(int x = 0, int y = 0){
        this->x = x; 
        this->y = y;
    }
    friend istream& operator>>(istream&input, arr&d);
    friend ostream& operator<<(ostream&output, arr&d);
};

istream& operator>>(istream&input, arr&d){
    input >> d.x >> d.y;
    return input;
}

ostream& operator<<(ostream&output, arr&d){
    output << d.x << " " << d.y;
    return output;
}

int main(){ 
    arr d;
    cin >> d;
    cout << d;
}
